#!/usr/bin/env node
"use strict";


/**
 * Module dependencies.
 */
const app = require("../dist/app");
const debug = require("debug")("be:server");
const http = require("http");
const mongoose = require("mongoose");
const dotenv = require("dotenv");
const setIoServer = require("../dist/socket");
dotenv.config();


/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);


/**
 * Create HTTP server.
 */
const server = http.createServer(app);


/**
 * Set socket.
 */
setIoServer.default(server);


/**
 * Connect mongoose
 */
const replicaURI = process.env.MONGO_URI;
mongoose.connect(replicaURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useCreateIndex: true,
})
  .then(() => { console.log('DB connection success') })
  .catch(() => {
    console.error('DB connection failed');
    process.exit(1);
  });


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}


/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

module.exports = server;
